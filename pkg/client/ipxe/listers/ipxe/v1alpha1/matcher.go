/*
Copyright (c) 2020 Mandelsoft. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/mandelsoft/kipxe/pkg/apis/ipxe/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MatcherLister helps list Matchers.
type MatcherLister interface {
	// List lists all Matchers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Matcher, err error)
	// Matchers returns an object that can list and get Matchers.
	Matchers(namespace string) MatcherNamespaceLister
	MatcherListerExpansion
}

// matcherLister implements the MatcherLister interface.
type matcherLister struct {
	indexer cache.Indexer
}

// NewMatcherLister returns a new MatcherLister.
func NewMatcherLister(indexer cache.Indexer) MatcherLister {
	return &matcherLister{indexer: indexer}
}

// List lists all Matchers in the indexer.
func (s *matcherLister) List(selector labels.Selector) (ret []*v1alpha1.Matcher, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Matcher))
	})
	return ret, err
}

// Matchers returns an object that can list and get Matchers.
func (s *matcherLister) Matchers(namespace string) MatcherNamespaceLister {
	return matcherNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MatcherNamespaceLister helps list and get Matchers.
type MatcherNamespaceLister interface {
	// List lists all Matchers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Matcher, err error)
	// Get retrieves the Matcher from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Matcher, error)
	MatcherNamespaceListerExpansion
}

// matcherNamespaceLister implements the MatcherNamespaceLister
// interface.
type matcherNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Matchers in the indexer for a given namespace.
func (s matcherNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Matcher, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Matcher))
	})
	return ret, err
}

// Get retrieves the Matcher from the indexer for a given namespace and name.
func (s matcherNamespaceLister) Get(name string) (*v1alpha1.Matcher, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("matcher"), name)
	}
	return obj.(*v1alpha1.Matcher), nil
}
