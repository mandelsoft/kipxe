/*
Copyright (c) 2020 Mandelsoft. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/mandelsoft/kipxe/pkg/apis/ipxe/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BootResourceLister helps list BootResources.
type BootResourceLister interface {
	// List lists all BootResources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BootResource, err error)
	// BootResources returns an object that can list and get BootResources.
	BootResources(namespace string) BootResourceNamespaceLister
	BootResourceListerExpansion
}

// bootResourceLister implements the BootResourceLister interface.
type bootResourceLister struct {
	indexer cache.Indexer
}

// NewBootResourceLister returns a new BootResourceLister.
func NewBootResourceLister(indexer cache.Indexer) BootResourceLister {
	return &bootResourceLister{indexer: indexer}
}

// List lists all BootResources in the indexer.
func (s *bootResourceLister) List(selector labels.Selector) (ret []*v1alpha1.BootResource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BootResource))
	})
	return ret, err
}

// BootResources returns an object that can list and get BootResources.
func (s *bootResourceLister) BootResources(namespace string) BootResourceNamespaceLister {
	return bootResourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BootResourceNamespaceLister helps list and get BootResources.
type BootResourceNamespaceLister interface {
	// List lists all BootResources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BootResource, err error)
	// Get retrieves the BootResource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BootResource, error)
	BootResourceNamespaceListerExpansion
}

// bootResourceNamespaceLister implements the BootResourceNamespaceLister
// interface.
type bootResourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BootResources in the indexer for a given namespace.
func (s bootResourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BootResource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BootResource))
	})
	return ret, err
}

// Get retrieves the BootResource from the indexer for a given namespace and name.
func (s bootResourceNamespaceLister) Get(name string) (*v1alpha1.BootResource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bootresource"), name)
	}
	return obj.(*v1alpha1.BootResource), nil
}
