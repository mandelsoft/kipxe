/*
Copyright (c) 2020 Mandelsoft. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/mandelsoft/kipxe/pkg/apis/ipxe/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MetaDataMapperLister helps list MetaDataMappers.
type MetaDataMapperLister interface {
	// List lists all MetaDataMappers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MetaDataMapper, err error)
	// MetaDataMappers returns an object that can list and get MetaDataMappers.
	MetaDataMappers(namespace string) MetaDataMapperNamespaceLister
	MetaDataMapperListerExpansion
}

// metaDataMapperLister implements the MetaDataMapperLister interface.
type metaDataMapperLister struct {
	indexer cache.Indexer
}

// NewMetaDataMapperLister returns a new MetaDataMapperLister.
func NewMetaDataMapperLister(indexer cache.Indexer) MetaDataMapperLister {
	return &metaDataMapperLister{indexer: indexer}
}

// List lists all MetaDataMappers in the indexer.
func (s *metaDataMapperLister) List(selector labels.Selector) (ret []*v1alpha1.MetaDataMapper, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MetaDataMapper))
	})
	return ret, err
}

// MetaDataMappers returns an object that can list and get MetaDataMappers.
func (s *metaDataMapperLister) MetaDataMappers(namespace string) MetaDataMapperNamespaceLister {
	return metaDataMapperNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MetaDataMapperNamespaceLister helps list and get MetaDataMappers.
type MetaDataMapperNamespaceLister interface {
	// List lists all MetaDataMappers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MetaDataMapper, err error)
	// Get retrieves the MetaDataMapper from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MetaDataMapper, error)
	MetaDataMapperNamespaceListerExpansion
}

// metaDataMapperNamespaceLister implements the MetaDataMapperNamespaceLister
// interface.
type metaDataMapperNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MetaDataMappers in the indexer for a given namespace.
func (s metaDataMapperNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MetaDataMapper, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MetaDataMapper))
	})
	return ret, err
}

// Get retrieves the MetaDataMapper from the indexer for a given namespace and name.
func (s metaDataMapperNamespaceLister) Get(name string) (*v1alpha1.MetaDataMapper, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("metadatamapper"), name)
	}
	return obj.(*v1alpha1.MetaDataMapper), nil
}
